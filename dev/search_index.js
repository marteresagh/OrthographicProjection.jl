var documenterSearchIndex = {"docs":
[{"location":"description.html#Description","page":"Description","title":"Description","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"In this package you can find two main algorithms:","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"segment : allows you to clip the points of a 3D point cloud contained in a volume,\northophoto : generates the image as orthographic projection of 3D point cloud (whole or clipped in a volume) with respect to a chosen plane","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"Both of them has the same core function, that takes as input a point cloud Potree project and a cuboidal LAR model.","category":"page"},{"location":"description.html#Input-Point-Cloud","page":"Description","title":"Input Point Cloud","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"To manage a point cloud with huge number of points we use Potree project, achieved with the tool PotreeConverter 1.7.","category":"page"},{"location":"description.html#Potree","page":"Description","title":"Potree","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"A Potree is a data structure, used to store huge point clouds, based on octree. All details of this structure are described by Markus SchÃ¼tz in his thesis.","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"(Image: potree)","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"A Potree project is a collection of files, for each node of the octree there is a file called r, followed by a numeric code indicating its position in the hierarchy, for example:","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"r is the root node,\nr0 is the first child of the root node,\nr07 is the eighth child of the first child of the root node.","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"Due to particular way of tagging nodes, it is possible store Potree in a trie data structure, provided by Julia in module DataStructures.jl. As the usual tree data structure, a trie is made up of collections of trie node. Every trie node has three components:","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"a value, where store information: in our case the path to the (LAS or LAZ) file associated;\na map, where key is a digit and the value is trie node, used to establish the parent-child relationship;\nboolean value, indicating the end of word. In our case true in each node.","category":"page"},{"location":"description.html#Core-Function:-Trie-Traversal","page":"Description","title":"Core Function: Trie Traversal","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"To speed up the search for points falling within the region of interest we use trie to process the whole point cloud. Each node of Potree is generated by the decomposition of space into congruent regions: the volume occupied by the octree node is described as an AABB, which we find in the header of the file associated with the node. Assuming this, we only process nodes that intersect the volume. There are three possible options of intersection, see figure below:","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"0 -> volume not intersect octree node (skip this node and all subtree)\n1 -> volume intersect, but not contains, octree node (check for this node and his children)\n2 -> volume contains octree node (process this node and all subtree)","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"(Image: example)","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"In figure:","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"pink volume represents region of interest, points in yellow quads (0) are not processed, in green quads (1) only the points falling in pink volume are processed, and, without further checks, all points in blue quads (2) are processed.","category":"page"},{"location":"description.html#Pseudocode","page":"Description","title":"Pseudocode","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"\nfunction trie_traversal(trie::Trie, volume::Model):\n  AABB = boundingbox(trie)\n\n\tintersection = modelsdetection(volume, AABB)\n  if intersection == 2\n    for k in keys(trie)\n      file = trie[k]\n      process(file)\n    end\n  elseif intersection == 1\n    dfs(trie, volume)\n  end\nend\n\nfunction dfs(trie::Trie, volume::Model):\n\n\tfile = trie.value\n\toctree = octree2aabb(file)\n\tintersection = modelsdetection(volume, octree)\n\n\tif intersection == 1\n\t\tprocessif(file)\n\n\t\tfor key in collect(keys(trie.children))\n\t\t\tdfs(trie.children[key], volume)\n\t\tend\n\n\telseif intersection == 2\n\n\t\tfor k in keys(trie)\n\t\t\tfile = trie[k]\n\t\t\tprocess(file)\n\t\tend\n\n\tend\nend","category":"page"},{"location":"description.html#Process:-segment-and-orthophoto","page":"Description","title":"Process: segment and orthophoto","text":"","category":"section"},{"location":"description.html#Segment","page":"Description","title":"Segment","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"All points of input point clouds within region of interest are simply stored and saved in a new LAS file.","category":"page"},{"location":"description.html#Orthophoto","page":"Description","title":"Orthophoto","text":"","category":"section"},{"location":"description.html","page":"Description","title":"Description","text":"Orthographic view projects at a right angle to the data plane.","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"An image is just a multidimensional array: a grid (with 3 channels for storing RGB color attribute) is inscribed into the projection of volume.","category":"page"},{"location":"description.html","page":"Description","title":"Description","text":"The first point that falls into a cell will be accepted and its quote (distance to plane) is stored in a buffer. If a point falls inside a cell that is already occupied then the point with the highest quote is accepted, because it is the closest point to the observer. (Image: orthographic projection)","category":"page"},{"location":"results.html#Results","page":"Results","title":"Results","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"(Image: OrtofotoCAVA) (Image: FloorPlan) (Image: Casaletto)","category":"page"},{"location":"script.html#Script-Usage","page":"Script","title":"Script Usage","text":"","category":"section"},{"location":"script.html#orthophoto.jl","page":"Script","title":"orthophoto.jl","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"Orthographic projection of 3D point cloud.","category":"page"},{"location":"script.html#Input-parameters-description:","page":"Script","title":"Input parameters description:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"PO: projection plane and sight direction. Option: \"XY+\",\"XY-\",\"XZ+\",\"XZ-\",\"YZ+\",\"YZ-\"\noutput: output filename for image\nsource: Potree projects\nbbin: volume\nGSD: ground sampling distance\nbgcolor: background color of image\nquote: quote of section\nthickness: thickness of section\npc: if true clip point cloud","category":"page"},{"location":"script.html#Options:","page":"Script","title":"Options:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"$ julia orthophoto.jl -h   \n\npositional arguments:\n  source               A text file with Potree directories list or a\n                       single Potree directory\n\noptional arguments:\n  -o, --output OUTPUT   Output image\n  --bbin BBIN           Bounding box as 'x_min y_min z_min x_max y_max\n                        z_max' or Potree JSON volume model\n  --po PO               Projection plane: XY+, XY-, XZ+, XZ-,\n                        YZ+, YZ- (default: \"XY+\")\n  --gsd GSD             Resolution (type: Float64, default: 0.3)\n  --quote QUOTE         Distance of plane from origin (type: Float64)\n  --thickness THICKNESS\n                        Section thickness (type: Float64)\n  --pc                  If true a point cloud of extracted model is saved in a\n                        LAS file\n  --bgcolor BGCOLOR     Background color\n  -h, --help            show this help message and exit","category":"page"},{"location":"script.html#Examples:","page":"Script","title":"Examples:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"# Orthographic projection of top view\njulia orthophoto.jl \"C:/Potree_projects.txt\" -o \"C:/image.jpg\" --bbin \"0 0 0 1 1 1\" --bgcolor \"0 0 0\"","category":"page"},{"location":"script.html#segment.jl","page":"Script","title":"segment.jl","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"Point cloud segmentation: produce LAS file of Potree projects, setting projection (epsg code) in header if provided.","category":"page"},{"location":"script.html#Input-parameters-description:-2","page":"Script","title":"Input parameters description:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"output: output LAS filename\nsource: Potree projects\nepsg: projection code","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"Clipping volume are described by one of the following:","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"bbox: axis aligned bounding box\njsonfile: JSON format\nc,e,r: position, scale, rotation","category":"page"},{"location":"script.html#Options:-2","page":"Script","title":"Options:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"$ julia segment.jl -h   \n\npositional arguments:\n  source               A text file with Potree directories list or a\n                       single Potree directory\n\noptional arguments:\n  -o, --output OUTPUT  Output file: LAS format\n  --bbox BBOX          Bounding box as 'x_min y_min z_min x_max y_max\n                       z_max'\n  --jsonfile JSONFILE  Path to Potree JSON volume model\n  --c C                Position: center of volume\n  --e E                Scale: size of box\n  --r R                Rotation: Euler angles (radians) of rotation of\n                       box\n  --epsg EPSG          EPSG code (type: Int64)\n  -h, --help           show this help message and exit","category":"page"},{"location":"script.html#Examples:-2","page":"Script","title":"Examples:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"# axis aligned bounding box\njulia segment.jl \"C:/Potree_projects.txt\" -o \"C:/partition.las\" --bbox \"0 0 0 1 1 1\" --epsg 32720\n\n# JSON format\njulia segment.jl \"C:/Potree_projects.txt\" -o \"C:/partition.las\" --jsonfile \"C:/volume.json\"\n\n# position, scale, rotation\njulia segment.jl \"C:/Potree_projects.txt\" -o \"C:/partition.las\" --c \"0. 0. 0.\" --e \"1. 1. 1.\" --r \"1.5707963267948966 0. 0.\"","category":"page"},{"location":"script.html#slicing.jl","page":"Script","title":"slicing.jl","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"Point cloud slicing.","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"Return a set of slices, one LAS file per slice.","category":"page"},{"location":"script.html#Input-parameters-description:-3","page":"Script","title":"Input parameters description:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"output: output folder\nprojectname: name of projects\nsource: Potree projects\nbbin: region of interest","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"First slice is described with these parameters:","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"p1: start point\np2: end point\naxis: a versor of plane\nthickness: thickness","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"Step between slices can be constant:","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"step: distance between slices\nn: number of slices","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"or variable:","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"steps: distances between slices","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"If not provided returns only first slice.","category":"page"},{"location":"script.html","page":"Script","title":"Script","text":"(Image: params)","category":"page"},{"location":"script.html#Options:-3","page":"Script","title":"Options:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"$ julia slicing.jl -h   \n\npositional arguments:\n  source                A text file with Potree directories list or a\n                        single Potree directory\n\noptional arguments:\n  -p, --projectname PROJECTNAME\n                        Project name\n  -o, --output OUTPUT   Output folder\n  --bbin BBIN           Bounding box as 'x_min y_min z_min x_max y_max\n                        z_max' or Potree JSON volume model\n  --p1 P1               Start point\n  --p2 P2               End point\n  --axis AXIS           A vector in plane (default: \"0 0 1\")\n  --thickness THICKNESS\n                        Section thickness (type: Float64, default:\n                        0.1)\n  --step STEP           Constant distance between sections (type: Float64)\n  --n N                 Number of sections (type: Int64)\n  --steps STEPS         Distance between sections\n  -h, --help            show this help message and exit","category":"page"},{"location":"script.html#Examples:-3","page":"Script","title":"Examples:","text":"","category":"section"},{"location":"script.html","page":"Script","title":"Script","text":"# One slice\njulia slicing.jl \"C:/Potree_projects.txt\" -o \"C:/folder\" -p \"My_Proj\" --bbin \"0 0 0 1 1 1\" --p1 \"0 0 0\" --p2 \"1 1 1\" --axis \"0 0 1\" --thickness 0.2\n\n# Costant distance between slice\njulia slicing.jl \"C:/Potree_projects.txt\" -o \"C:/folder\" -p \"My_Proj\" --bbin \"0 0 0 1 1 1\" --p1 \"0 0 0\" --p2 \"1 1 1\" --axis \"0 0 1\" --thickness 0.2 --step 1 --n 10\n\n# Variable distance between slice\njulia slicing.jl \"C:/Potree_projects.txt\" -o \"C:/folder\" -p \"My_Proj\" --bbin \"0 0 0 1 1 1\" --p1 \"0 0 0\" --p2 \"1 1 1\" --axis \"0 0 1\" --thickness 0.2 --steps \"1 1 2 3 1 1 5 6\"","category":"page"},{"location":"index.html#OrthographicProjection","page":"Home","title":"OrthographicProjection","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"OrthographicProjection.jl is a Julia library created for two main purposes:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"generate orthophoto of a point cloud with respect to a chosen plane,\nsegment a point cloud.","category":"page"},{"location":"index.html#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To install a Julia package you have to use the package manager Pkg. Enter the Pkg REPL by pressing ] from the Julia REPL and then use the command add.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This package is not in a registry, it can be added by instead of the package name giving the URL to the repository to add.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia  (@v1.4) pkg> add https://github.com/marteresagh/OrthographicProjection.jl","category":"page"},{"location":"index.html#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: grafo delle dipendenze)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"OrthographicProjection.jl has the following dependencies:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Common.jl\nFileManager.jl\nImages.jl","category":"page"},{"location":"index.html#Structure-of-documentation","page":"Home","title":"Structure of documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This documentation is a collection of several parts:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The \"Description\" part explains the algorithm implemented.\nThe \"Results\" part shows you the results of a specific job.\nThe \"Script\" part describes how to launch a job from command line.\nThe \"References\" part is a collection of API function references provided by OrthographicProjection.","category":"page"},{"location":"refs.html#References","page":"References","title":"References","text":"","category":"section"},{"location":"refs.html","page":"References","title":"References","text":"CurrentModule = OrthographicProjection\nDocTestSetup = quote\n    using OrthographicProjection\nend","category":"page"},{"location":"refs.html","page":"References","title":"References","text":"ParametersExtraction\nParametersOrthophoto\ninit\ntrie_traversal\ndfs","category":"page"},{"location":"refs.html#OrthographicProjection.ParametersExtraction","page":"References","title":"OrthographicProjection.ParametersExtraction","text":"ParametersExtraction\n\nDescription:\n\noutputfile: Output filename for point cloud\npotreedirs: Potree projects\nmodel: Cuboidal LAR model\nmainHeader: header of point cloud LAS file\n\nFields\n\noutputfile::String\npotreedirs::Array{String,1}\nmodel::Lar.LAR\nmainHeader::LasIO.LasHeader\n\n\n\n\n\n","category":"type"},{"location":"refs.html#OrthographicProjection.ParametersOrthophoto","page":"References","title":"OrthographicProjection.ParametersOrthophoto","text":"ParametersOrthophoto\n\nDescription:\n\nPO: Projection plane and sight direction. Option: \"XY+\",\"XY-\",\"XZ+\",\"XZ-\",\"YZ+\",\"YZ-\"\noutputimage: Output filename for image\noutputfile: Output filename for point cloud\npotreedirs: Potree projects\nmodel: Cuboidal LAR model\ncoordsystemmatrix: Rotation matrix related to PO\nRGBtensor: Image tensor\nrasterquote: Matrix of heigth (z-buffer)\nGSD: Ground sampling distance\nrefX: x coordinate of landmark\nrefY: y coordinate of landmark\npc: if true extract point cloud\nucs: user coordinate system\nmainHeader: header of point cloud file las\n\nFields\n\nPO::String\noutputimage::String\noutputfile::String\npotreedirs::Array{String,1}\nmodel::Lar.LAR\ncoordsystemmatrix::Array{Float64,2}\nRGBtensor::Array{Float64,3}\nrasterquote::Array{Float64,2}\nGSD::Float64\nrefX::Float64\nrefY::Float64\npc::Bool\nucs::Matrix\nmainHeader::LasIO.LasHeader\n\n\n\n\n\n","category":"type"},{"location":"refs.html#OrthographicProjection.init","page":"References","title":"OrthographicProjection.init","text":"init(txtpotreedirs::String,\n\toutputfile::String,\n\tmodel::Lar.LAR;\n\tepsg = nothing::Union{Nothing,Integer}\n\t)\n\nInitialize parameters for segment algorithm.\n\nInput:\n\ntxtpotreedirs: path to .txt file, list of Potree projects, or to Potree project\noutputfile: output LAS filename\nmodel: cuboidal LAR model\nepsg: projection code\n\n\n\n\n\ninit(\n\ttxtpotreedirs::String,\n\toutputimage::String,\n\tbbin::Union{String,AABB},\n\tGSD::Float64,\n\tPO::String,\n\tquota::Union{Float64,Nothing},\n\tthickness::Union{Float64,Nothing},\n\tucs::Union{String,Matrix{Float64}},\n\tBGcolor::Array{Float64,1},\n\tpc::Bool\n\t)\n\nInitialize parameters for orthographic projection algorithm.\n\nInput:\n\ntxtpotreedirs: Path to .txt file, list of Potree projects, or to Potree project\noutputimage: Output filename for image\nbbin: Path to json file or AABB\nGSD: Ground sampling distance\nPO: Projection plane and sight direction. Option: \"XY+\",\"XY-\",\"XZ+\",\"XZ-\",\"YZ+\",\"YZ-\"\nquote: Distance of plane from the origin\nthickness: Thickness of plane\nucs: User coordinates system\nBGcolor: Background color image\npc: If true return LAS file of point cloud\n\n\n\n\n\n","category":"function"},{"location":"refs.html#OrthographicProjection.trie_traversal","page":"References","title":"OrthographicProjection.trie_traversal","text":"trie_traversal(params::Union{ParametersExtraction,ParametersOrthophoto},s::Union{Nothing,IOStream})\n\nTrie traversal. If entire point cloud falls in volume process all files of Potree project else travers trie, depth search first, and process nodes falling in region of interest.\n\nInput:\n\nparams: initial parameters\ns: nothing or stream file where save las points\n\nOutput:\n\nn: number of processed points\n\n\n\n\n\n","category":"function"},{"location":"refs.html#OrthographicProjection.dfs","page":"References","title":"OrthographicProjection.dfs","text":"dfs(t::DataStructures.Trie{String},\n\nparams::Union{ParametersOrthophoto,ParametersExtraction},    \t\ts::Union{Nothing,IOStream},n::Int64,nfiles::Int64,l::Int64)\n\nDepth search first.\n\n\n\n\n\n","category":"function"}]
}
